# Thanks to https://github.com/coil-kt/coil/blob/master/.github/workflows/ci.yml

# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

image: openjdk:8-jdk

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_HOME
  - pushd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
  - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
  - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

name: CI
on:
    push:
        branches:
            - master
    pull_request:
jobs:
    ci:
        name: Build + Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout current repository in ubuntu's file system
              uses: actions/checkout@v2
              with:
                submodules: recursive
            
            - name: Setup JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8

            # Ensure .gradle/caches is empty before writing to it.
            # This helps us stay within Github's cache size limits.
            - name: Clean Cache
              run: rm -rf ~/.gradle/caches

            # Restore the cache.
            # Intentionally don't set 'restore-keys' so the cache never contains redundant dependencies.
            - uses: actions/cache@v1
              with:
                path: ~/.gradle/caches
                key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }} }}

            - name: Build
              run: ./gradlew clean build --warning-mode=all --stacktrace
              
            #- name: Print contents in current directory
            #  run: ls -la

            #- name: Detekt
            #  run: ./gradlew detekts